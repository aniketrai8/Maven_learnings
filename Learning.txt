

It is a project Management tool, Helps developers im
Dependency Resolution
Build Generation
Documentation


##POM _ Project object Model
It helps to organize and manage software development process

As the project progresses sometimes you need to update the dependencies which we dont need to do manually it can be
automatically done by Maven.

Popular Features of Maven ->
Dependency Mangement
Project Standardization
Build Automation
Plugin system
Consistent build
Seamless Integration with IDE

Maven LifeCycle ->
Compiling, Test, Package , Integration Testing, Verify, Install, Deploy,Validate

Basic Commands - Compiles source code for the project
mvn clean -> Cleans the project and removes all the files generated by previous builds
mvn compile -> Compiles source code of the project
mvn test -> Runs Test for the project
mvn test-compile ->
mvn package -> Creates the JAR or WAR files for the project to convert it into a distributable format
mvn install -> Deploys the packages JAR/WAR files inside the repository
mvn site-> generates the project documentation

One of the first step is to define the dependencies ->
<dependencies>
   <dependency>
     <groupId>org.springFramework</groundId>
     <artifactId>spring-core</artifactId>
     <versions>5.3.8</versions>
   <dependency>
 </dependencies>

 Second Step is to resolve Dependency conflicts ->
So post dependencies are stated in pom.xml file. Maven will automatically download and resolve dependencies from
central repository and it will first check if the dependencies are already within the repos

Managing Dependencies->
Managing Dependencies involve including adding,removing and updating dependencies.

Compile dependency -> These are provided to succesfully compile the dependency, these are packed in project
                      output or jar file

Provided Dependency -> These are expected to be provided by the runtime enviroment, examples of such dependencies
are severlets.api and p.api

Runtime Dependencies -> Runtime dependenciesa are provided as their name suggests and are kept outside the JAR
files



Test Dependencies -> Are required at the time of Test


----------------------------------------------------- #GRADLE --------------------------------------------------

Gradle basic needs is that there are number of parts of developing a full scale Java project to be delievered to the client, it involves

*Devloping Source Code
*Compiling the code
* Adding libraries/jar files to the classpath
* Creating Projects standard directories
Generating documents
* Building Jar/War files
* Unit Testing
* Deployment

So any of this might brake at any point and that might lead to causing an error delay in delivvering the project to the client in order to reduce time and projetc
Dependencies mangement and lifecyle issuses
A BUILD automation tool like Gradle was introduced, to manage the effectively the entire cycle and speed up the whlole process and Automate the same.

